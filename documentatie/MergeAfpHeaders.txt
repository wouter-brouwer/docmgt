
PPFA onderdeel van IPM for Windows?


Split & Merge AFP

Bij het splitsen van een AFP job in documenten spelen een aantal zaken.

Resources
Formdef, Font, Codepage, Overlay, PageSegment

Document boundaries
Named Page Groups
Er moet minimaal 1 niveau van Named Page Groups zijn.
Als er geen Page Groups zijn, dan error.
Als er één niveau PageGroups is dient daarop gesplitst te worden.
Als er meerdere niveaus zijn dient in principe op het hoogste niveau gesplitst te worden.
Als er meerdere niveaus zijn en er een override niveau voor de job geldt, dan dienen de hogere niveaus bij elk afgesplitst document toegevoegd te worden.
Hiervoor moeten de PageGroup records voor het betreffend niveau gebufferd worden en moeten er afsluitende end page group records toegevoegd worden.

Bij het samenvoegen is het van belang dat de pagegroups weer unieke namen krijgen.



t de omvattende  
geen PageGroups zijn 



werkt alleen goed als
Het hoogste level Named Page Groups de feitelijke documenten aangeeft.

We onderscheiden generic en specific resources.
Generic resources worden in meerdere documenten gebruikt.
Specific resources maar in één, meestal zelfs maar op één pagina.
Specific resources hebben geen vaste naam, maar krijgen meestal een volgnummer.

Generic resources kunnen in een resourcepool bewaard worden.
Specific resources moet je bij het document houden.

Bij het samenvoegen van documenten is het handig om de specific resources te hernummeren.



Er alleen resources met een unieke naam worden gebruikt.

SplitAFP heeft de AFP bestanden gesplitst in Headers en afzonderlijke documenten.

Bij het samenvoegen moeten eerst de headers worden samengevoegd.

Daarna de documenten.


Voor het samenvoegen van de Headers kun je ze ook splitsen in resources.
En die resources weer samenvoegen tot één bestand.
Dit gaat dus fout als er resources in de bestanden zitten met gelijke namen maar verschillende inhoud.

BRG Begin Resource Group

Include voor alle AFP Structured Field Identifiers

BNG.s = "D3A8AA"


Include voor LogMsg

Include voor Lock



Principe dat alle programma's enkelvoudig en zelfstandig draaien en hun uitvoer pas beschikbaar stellen als het klaar is en de invoer als verwerkt markeren.

Multithread mogelijkheden nog uitzoeken. 




EXAMPLE PL/I PROCEDURE
PRINT_BARCODE:PROC;
/*******************************************************************/
/* PRINTING OF BARCODE ON LASER PRINTER FROM PL/1 PROGRAM */
/*******************************************************************/
/* DCL FILEØ1 FILE OUTPUT; Declared in calling procedure */


/* FIRST RECORD << BBC >> BEGIN BAR CODE OBJECT */
DCL BBC_SF_RED CHAR(133) DEF BBC_SFI;
DCL 1 BBC_SFI,
2 BBC_START CHAR(1), /* 5A */
2 BBC_LENGTH CHAR(2), /* LENGTH OF OUTPUT RECORD */
2 BBC_SF_ID CHAR(3), /* IDENT OF EVERY RECORD*/
2 BBC_FLAG CHAR(1),
2 BBC_RESERV CHAR(2), /* RESERVED FIELD */
2 BBC_DATA CHAR(124);

DCL BBC_PADLEN CHAR(1) DEF BBC_SFI POS(133);

DCL BBC_SF_FL BIT(8) BASED(ADDR(BBC_SFI.BBC_FLAG));


/* SECOND RECORD << BOG >> BEGIN OBJECT ENVIRONMENT GROUP */
DCL BOG_SF_RED CHAR(133) DEF BOG_SFI;
DCL 1 BOG_SFI,
2 BOG_START CHAR(1), /* 5A */
2 BOG_LENGTH CHAR(2),
2 BOG_SF_ID CHAR(3),
2 BOG_FLAG CHAR(1),
2 BOG_RESERV CHAR(2),
2 BOG_DATA CHAR(124);
DCL BOG_PADLEN CHAR(1) DEF BOG_SFI POS(133);
DCL BOG_SF_FL BIT(8) BASED(ADDR(BOG_SFI.BOG_FLAG));

/* THIRD RECORD << OBD >> OBJECT AREA DESCRIPTOR */
DCL OBD_SF_RED CHAR(133) DEF OBD_SFI;
DCL 1 OBD_SFI,
2 OBD_START CHAR(1), /* 5A */
2 OBD_LENGTH CHAR(2),
2 OBD_SF_ID CHAR(3),
2 OBD_FLAG CHAR(1),
2 OBD_RESERV CHAR(2),
2 OBD_DATA,
3 OBD_TRIPLET_X43,
4 OBD_X43_LENGTH CHAR(1),
4 OBD_X43_ID_TRI CHAR(1),
4 OBD_X43_ID_OBP CHAR(1),
3 OBD_TRIPLET_X4B,
4 OBD_X4B_LENGTH CHAR(1),
4 OBD_X4B_ID_TRI CHAR(1),
4 OBD_X4B_MEASUR_UNITS_X CHAR(1),
4 OBD_X4B_MEASUR_UNITS_Y CHAR(1),
4 OBD_X4B_DOT_PER_X CHAR(2),
4 OBD_X4B_DOT_PER_Y CHAR(2),
3 OBD_TRIPLET_X4C,
4 OBD_X4C_LENGTH CHAR(1),
4 OBD_X4C_ID_TRI CHAR(1),
4 OBD_X4C_SIZE_OBJ CHAR(1),
4 OBD_X4C_X_DIM_OBJ CHAR(3),
4 OBD_X4C_Y_DIM_OBJ CHAR(3),
3 OBD_REST CHAR(1Ø4);
DCL OBD_PADLEN CHAR(1) DEF OBD_SFI POS(133);
DCL OBD_SF_FL BIT(8) BASED(ADDR(OBD_SFI.OBD_FLAG));

/* FOURTH RECORD << OBP >> OBJECT AREA POSITION */
DCL OBP_SF_RED CHAR(133) DEF OBP_SFI;
DCL 1 OBP_SFI,
2 OBP_START CHAR(1), /* 5A */
2 OBP_LENGTH CHAR(2),
2 OBP_SF_ID CHAR(3),
2 OBP_FLAG CHAR(1),
2 OBP_RESERV CHAR(2),
2 OBP_DATA,
3 OBP_ID CHAR(1),
3 OBP_MEANINGFUL_LENGTH CHAR(1), /* LENGTH FROM HERE */
3 OBP_X_START_OBJ CHAR(3),
3 OBP_Y_START_OBJ CHAR(3),
3 OBP_X_ROTATION_OBJ CHAR(2),
3 OBP_Y_ROTATION_OBJ CHAR(2),
3 OBP_RESERVED CHAR(1),
3 OBP_X_START_BARC CHAR(3),
3 OBP_Y_START_BARC CHAR(3),
3 OBP_X_ROTATION_BARC CHAR(2),
3 OBP_Y_ROTATION_BARC CHAR(2),
3 OBP_REF_SYST CHAR(1),
3 OBP_REST CHAR(1ØØ);
DCL OBP_PADLEN CHAR(1) DEF OBP_SFI POS(133);
DCL OBP_SF_FL BIT(8) BASED(ADDR(OBP_SFI.OBP_FLAG));

/* FIFTH RECORD << BDD >> BAR CODE DATA DESCRIPTOR */
DCL BDD_SF_RED CHAR(133) DEF BDD_SFI;
DCL 1 BDD_SFI,
2 BDD_START CHAR(1), /* 5A */
2 BDD_LENGTH CHAR(2),
2 BDD_SF_ID CHAR(3),
2 BDD_FLAG CHAR(1),
2 BDD_RESERV CHAR(2),
2 BDD_DATA,
3 BDD_MEASUR_UNITS CHAR(1),
3 BDD_RESERVED1 CHAR(1),
3 BDD_DOT_PER_X CHAR(2),
3 BDD_DOT_PER_Y CHAR(2),
3 BDD_WIDTH_BARCODE CHAR(2),
3 BDD_LENGTH_BARCODE CHAR(2),
3 BDD_RESERVED2 CHAR(2),
3 BDD_TYPE_BARCODE CHAR(1),
3 BDD_BARCOD_MODIF CHAR(1),
3 BDD_LABEL_FONT CHAR(1),
3 BDD_BARCODE_COLOR CHAR(2),
3 BDD_WIDTH_MIN_ELEM CHAR(1),
3 BDD_HEIGHT_ELEM CHAR(2),
3 BDD_MULTIPLI_KOEF CHAR(1),
3 BDD_RATIO CHAR(2),
3 BDD_REST CHAR(1Ø1);
DCL BDD_PADLEN CHAR(1) DEF BDD_SFI POS(133);
DCL BDD_SF_FL BIT(8) BASED(ADDR(BDD_SFI.BDD_FLAG));

/* SIXTH RECORD << EOG >> END OBJECT ENVIRONMENT GROUP */
/* END OF << BOG >> */
DCL EOG_SF_RED CHAR(133) DEF EOG_SFI;
DCL 1 EOG_SFI,
2 EOG_START CHAR(1), /* 5A */
2 EOG_LENGTH CHAR(2),
2 EOG_SF_ID CHAR(3),
2 EOG_FLAG CHAR(1),
2 EOG_RESERV CHAR(2),
2 EOG_DATA CHAR(124);
DCL EOG_PADLEN CHAR(1) DEF EOG_SFI POS(133);
DCL EOG_SF_FL BIT(8) BASED(ADDR(EOG_SFI.EOG_FLAG));

/* SEVENTH RECORD << BDA >> BAR CODE DATA */
DCL BDA_SF_RED CHAR(133) DEF BDA_SFI;
DCL 1 BDA_SFI,
2 BDA_START CHAR(1), /* 5A */
2 BDA_LENGTH CHAR(2),
2 BDA_SF_ID CHAR(3),
2 BDA_FLAG CHAR(1),
2 BDA_RESERV CHAR(2),
2 BDA_DATA,
3 BDA_LABEL_EXISTS CHAR(1),
3 BDA_X_START_OF_SYMBOL CHAR(2),
3 BDA_Y_START_OF_SYMBOL CHAR(2),
3 BDA_BARCODE_LABEL,
4 VV CHAR(2),
4 VBROJ CHAR(5),
4 VIRGULE CHAR(1),
4 RBRVB CHAR(3),
4 YU CHAR(2),
3 BDA_REST CHAR(1Ø6);
DCL BDA_PADLEN CHAR(1) DEF BDA_SFI POS(133);
DCL BDA_SF_FL BIT(8) BASED(ADDR(BDA_SFI.BDA_FLAG));
DCL BDA_OZNAKA BIT(8) BASED(ADDR(BDA_SFI.BDA_DATA));

/* EIGHTH RECORD << EBC >> END BAR CODE OBJECT */
DCL EBC_SF_RED CHAR(133) DEF EBC_SFI;
DCL 1 EBC_SFI,
2 EBC_START CHAR(1), /* 5A */
2 EBC_LENGTH CHAR(2),
2 EBC_SF_ID CHAR(3),
2 EBC_FLAG CHAR(1),
2 EBC_RESERV CHAR(2),
2 EBC_DATA CHAR(124);
DCL EBC_PADLEN CHAR(1) DEF EBC_SFI POS(133);
DCL EBC_SF_FL BIT(8) BASED(ADDR(EBC_SFI.EBC_FLAG));

BBC_SF_RED = (133)' ';
BOG_SF_RED = (133)' ';
OBD_SF_RED = (133)' ';
OBP_SF_RED = (133)' ';
BDD_SF_RED = (133)' ';
EOG_SF_RED = (133)' ';
BDA_SF_RED = (133)' ';
EBC_SF_RED = (133)' ';

/* RECORD << BBC >> BEGIN BAR CODE OBJECT */
BBC_START = '5A'X; /* 9Ø */
BBC_RESERV = 'ØØØØ'X;
BBC_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
BBC_SF_ID = 'D3A8EB'X; /* RECORD ID */
/* YOU CAN CHANGE THIS FIELD BUT IT HAS TO BE THE SAME AT THE END */
BBC_DATA = 'KOVBARCO'; /* Name of the Bar Code Object */
BBC_LENGTH = 'ØØ84'X; /* 132 */
BBC_PADLEN = '74'X; /* 116 LENGTH SFDATA,LENGTH OF "KOVBARCO"=8) */
WRITE FILE(FILEØ1) FROM(BBC_SF_RED);


/*****************************************************************/
/* RECORD << BOG >> BEGIN OBJECT ENVIRONMENT GROUP */
BOG_START = '5A'X; /* 9Ø */
BOG_RESERV = 'ØØØØ'X;
BOG_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
BOG_SF_ID = 'D3A8C7'X; /* RECORD ID */
/* YOU CAN CHANGE THIS FIELD BUT IT HAS TO BE THE SAME AT THE END */
BOG_DATA = 'OEGKOVER';
BOG_LENGTH = 'ØØ84'X; /* 132 */
BOG_PADLEN = '74'X; /* 116 */
WRITE FILE(FILEØ1) FROM(BOG_SF_RED);

/*****************************************************************/
/* RECORD << OBD >> OBJECT AREA DESCRIPTOR */
OBD_START = '5A'X;
OBD_RESERV = 'ØØØØ'X;
OBD_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
OBD_SF_ID = 'D3A66B'X; /* RECORD ID */
OBD_TRIPLET_X43.OBD_X43_LENGTH = 'Ø3'X; /* 3 */
OBD_TRIPLET_X43.OBD_X43_ID_TRI = '43'X; /* 67 */
OBD_TRIPLET_X43.OBD_X43_ID_OBP = 'Ø1'X; /* 1 */
OBD_TRIPLET_X4B.OBD_X4B_LENGTH = 'Ø8'X; /* 8 */
OBD_TRIPLET_X4B.OBD_X4B_ID_TRI = '4B'X; /* 75 */
OBD_TRIPLET_X4B.OBD_X4B_MEASUR_UNITS_X = 'ØØ'X; /* Ø 1Ø INCHES */

/* 'Ø1'X 1 1Ø CM */
OBD_TRIPLET_X4B.OBD_X4B_MEASUR_UNITS_Y = 'ØØ'X; /* Ø 1Ø INCHES */
OBD_TRIPLET_X4B.OBD_X4B_DOT_PER_X = 'Ø96Ø'X; /* 24ØØ */
OBD_TRIPLET_X4B.OBD_X4B_DOT_PER_Y = 'Ø96Ø'X; /* 24ØØ */
OBD_TRIPLET_X4C.OBD_X4C_LENGTH = 'Ø9'X; /* 9 */
OBD_TRIPLET_X4C.OBD_X4C_ID_TRI = '4C'X; /* 76 */
OBD_TRIPLET_X4C.OBD_X4C_SIZE_OBJ = 'Ø2'X; /* 2 */
OBD_TRIPLET_X4C.OBD_X4C_X_DIM_OBJ = 'ØØØ21C'X; /* 54Ø=2,25 INCHES*/
OBD_TRIPLET_X4C.OBD_X4C_Y_DIM_OBJ = 'ØØØØFØ'X; /* 24Ø=1 INCHES */
OBD_LENGTH = 'ØØ84'X; /* 132 */
OBD_PADLEN = '68'X; /* 1Ø4 */
WRITE FILE(FILEØ1) FROM(OBD_SF_RED);

/*****************************************************************/
/* RECORD << OBP >> OBJECT AREA POSITION */
OBP_START = '5A'X;
OBP_RESERV = 'ØØØØ'X;
OBP_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
OBP_SF_ID = 'D3AC6B'X; /* RECORD ID */
BP_LENGTH = 'ØØ84'X; /* 132 */
OBP_PADLEN = '64'X; /* 1ØØ */
OBP_DATA.OBP_ID = 'Ø1'X; /* THE SAME AS 3. BYTE U X43 TRI */
OBP_DATA.OBP_MEANINGFUL_LENGTH = '17'X; /* 23 */
OBP_DATA.OBP_X_START_OBJ = 'ØØØØCC'X; /* =2Ø4=Ø,85INCHES */
OBP_DATA.OBP_Y_START_OBJ = 'ØØØ744'X; /* =186Ø=7,75INCHES */
OBP_DATA.OBP_X_ROTATION_OBJ = '87ØØ'X; /* 27Ø DEGREES */
OBP_DATA.OBP_Y_ROTATION_OBJ = 'ØØØØ'X; /* Ø DEGREES */
OBP_DATA.OBP_RESERVED = 'ØØ'X;
OBP_DATA.OBP_X_START_BARC = 'ØØØØØØ'X;
OBP_DATA.OBP_Y_START_BARC = 'ØØØØØØ'X;
OBP_DATA.OBP_X_ROTATION_BARC = 'ØØØØ'X; /* Ø DEGREES */
OBP_DATA.OBP_Y_ROTATION_BARC = '2DØØ'X; /* 9Ø DEGREES */
OBP_DATA.OBP_REF_SYST = 'Ø1'X;
WRITE FILE(FILEØ1) FROM(OBP_SF_RED);

/*****************************************************************/
/* RECORD << BDD >> BAR CODE DATA DESCRIPTOR */
BDD_START = '5A'X;
BDD_RESERV = 'ØØØØ'X;
BDD_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
BDD_SF_ID = 'D3A6EB'X; /* RECORD ID 1387Ø827 */
BDD_DATA.BDD_MEASUR_UNITS = 'ØØ'X; /* 1Ø INCHES */
BDD_DATA.BDD_RESERVEDØ1 = 'ØØ'X;
BDD_DATA.BDD_DOT_PER_X = 'Ø96Ø'X; /*=24ØØ */
BDD_DATA.BDD_DOT_PER_Y = 'Ø96Ø'X; /*=24ØØ */
BDD_DATA.BDD_WIDTH_BARCODE = 'Ø21C'X; /*=54Ø=2,25 INCHES*/
BDD_DATA.BDD_LENGTH_BARCODE = 'ØØFØ'X; /*=24Ø=1 INCHES */
BDD_DATA.BDD_RESERVEDØ2 = 'ØØØØ'X;
BDD_DATA.BDD_TYPE_BARCODE = 'Ø1'X; /* BAR CODE 39 */
BDD_DATA.BDD_BARCOD_MODIF = 'Ø1'X; /* WITHOUT CHECK DIGIT */
BDD_DATA.BDD_LABEL_FONT = 'FF'X; /* 255 DEFAULT FONT */
BDD_DATA.BDD_BARCODE_COLOR = 'FFFF'X; /* 65535 DEFAULT */
BDD_DATA.BDD_WIDTH_MIN_ELEM = 'Ø7'X; /* BIN */
BDD_DATA.BDD_HEIGHT_ELEM = 'ØØ3C'X; /*=6Ø=Ø,25 INCHES */
BDD_DATA.BDD_MULTIPLI_KOEF = 'Ø1'X; /* BIN */
BDD_DATA.BDD_RATIO = 'ØØC8'X; /*=2ØØ */
BDD_LENGTH = 'ØØ84'X; /* 132 */
BDD_PADLEN = '65'X; /* 1Ø1 */
WRITE FILE(FILEØ1) FROM(BDD_SF_RED);

/*****************************************************************/
/* RECORD << EOG >> END OBJECT ENVIRONMENT GROUP */
/* END OF << BOG >> */
EOG_START = '5A'X;
EOG_RESERV = 'ØØØØ'X;
EOG_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
EOG_SF_ID = 'D3A9C7'X; /* RECORD ID */
EOG_DATA = 'OEGKOVER';
EOG_LENGTH = 'ØØ84'X; /* 132 */
EOG_PADLEN = '74'X; /* 116 */
WRITE FILE(FILEØ1) FROM(EOG_SF_RED);

/*****************************************************************/
/* RECORD << BDA >> BAR CODE DATA */
BDA_START = '5A'X;
BDA_RESERV = 'ØØØØ'X;
BDA_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
BDA_SF_ID = 'D3EEEB'X; /* RECORD ID */
BDA_LABEL_EXISTS = 'ØØØØØØØØ'B;
BDA_DATA.BDA_X_START_OF_SYMBOL = 'ØØ3C'X; /* =6Ø=Ø,25 INCHES */
BDA_DATA.BDA_Y_START_OF_SYMBOL = 'ØØ3C'X; /* =6Ø=Ø,25 INCHES */
BDA_DATA.BDA_BARCODE_LABEL.VV = 'VV';
BDA_DATA.BDA_BARCODE_LABEL.VBROJ = '35789';
BDA_DATA.BDA_BARCODE_LABEL.VIRGULE = '/';
BDA_DATA.BDA_BARCODE_LABEL.RBRVB = 'ØØ3';
BDA_DATA.BDA_BARCODE_LABEL.YU = 'YU';
BDA_LENGTH = 'ØØ84'X;
BDA_PADLEN = '6A'X;
WRITE FILE(FILEØ1) FROM(BDA_SF_RED);

/*****************************************************************/
/* RECORD << EBC >> END BAR CODE OBJECT */
EBC_START = '5A'X;
EBC_RESERV = 'ØØØØ'X;
EBC_SF_FL = 'ØØØØ1ØØØ'B; /* 5. BIT MUST BE 1 */
EBC_SF_ID = 'D3A9EB'X; /* RECORD ID */
EBC_DATA = 'KOVBARCO';
EBC_LENGTH = 'ØØ84'X;
EBC_PADLEN = '74'X;
WRITE FILE(FILEØ1) FROM(EBC_SF_RED);
/*****************************************************************/
END PRINT_BARCODE;

In AFP ziet een barcode er als volgt uit:

; BBC Begin Barcode Object
5A 0008 D3A8EB 00 0000

; BOG Begin Object Environment Group
5A 000E D3A8C7 00 0000 F0F0F0F0F0F0F1 ; (OEG Name)

; OBD Object Area Descriptor
5A 001A D3A66B 00 0000 
   ; Descriptor Position
   03 43 01 
   ; Measurement Units
   08 4B 00 00 0960 0960 
   ; Object Area Size
   09 4C 02 00FF 00FF

; OBP Object Area Position
5A 0020 D3AC6B 00 0000
   01 17 000000 000000 0000 0000 00 000000 000000 0000 0000 01

; BDD Barcode Data Descriptor
5A 001F D3A6EB 00 0000
   ; BSD Barcode Symbol Descriptor
   00 00 0960 0960 00FF 00FF 0000 
   1C 00 ; Data Matrix
   FF FFFF FF FFFF 01 00C8

EOG ; End Object Environment Group
5A 000E D3A9C7 00 0000 F0F0F0F0F0F0F1 ; (OEG Name)

BDA ; Barcode Data
5A 0013 D3EEEB 00 0000
   00 0000 0000 F1F2F3F4F5F6F7F8 ; <data>

; EBC End Barcode Object
5A 0008 D3A9EB 00 0000
